(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{"/94A":function(e){e.exports=JSON.parse('{"root":["index","setup"],"References":{"Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse","server-service-registration"],"Client":["client-http","client-thrift","client-grpc","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-structured-logging-kafka","advanced-unit-testing","advanced-production-checklist","advanced-zipkin","advanced-saml","advanced-spring-webflux-integration","advanced-dropwizard-integration"]}')},Wp6k:function(e,t,a){"use strict";a.r(t),a.d(t,"pageTitle",(function(){return c})),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return m}));var n,r=a("8o2o"),i=(a("q1tI"),a("7ljp")),o=a("xCMr"),c="Structured logging",s={},b=(n="Tip",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),Object(i.b)("div",e)}),p={pageTitle:c,_frontmatter:s},l=o.a;function m(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)(l,Object.assign({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"structured-logging",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h1"},{href:"#structured-logging","aria-label":"structured logging permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Structured logging"),Object(i.b)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object.assign({parentName:"p"},{href:"#what-properties-can-be-retrieved"}),"What properties can be retrieved?")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#request-properties"}),"Request properties")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#response-properties"}),"Response properties")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#client-connection-timing-properties"}),"Client connection timing properties")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object.assign({parentName:"p"},{href:"#availability-of-properties"}),"Availability of properties")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#availability-of-client-timing-properties"}),"Availability of client timing properties")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object.assign({parentName:"p"},{href:"#enabling-content-previews"}),"Enabling content previews"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object.assign({parentName:"p"},{href:"#nested-log"}),"Nested log")))),Object(i.b)("p",null,"Although traditional logging is a useful tool to diagnose the behavior of an application, it has its own\nproblem; the resulting log messages are not always machine-friendly. This section explains the Armeria API for\nretrieving the information collected during request life cycle in a machine-friendly way."),Object(i.b)("h2",{id:"what-properties-can-be-retrieved",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h2"},{href:"#what-properties-can-be-retrieved","aria-label":"what properties can be retrieved permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"What properties can be retrieved?"),Object(i.b)("p",null,Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," provides various properties recorded while handling a request:"),Object(i.b)("h3",{id:"request-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h3"},{href:"#request-properties","aria-label":"request properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Request properties"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("div",{style:{width:"13rem"}},"Property")),Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the request processing started, in microseconds since the\nepoch (01-Jan-1970 00:00:00 UTC)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to process the request completely"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestLength"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the byte length of the request content"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestCause"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the cause of request processing failure (if any)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"sessionProtocol"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the protocol of the connection (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"H2C"),")"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"serializationFormat"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the serialization format of the content (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"tbinary"),", ",Object(i.b)("inlineCode",{parentName:"p"},"none"),")"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"name"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the human-readable simple name of the request, such as:"),Object(i.b)("ul",{parentName:"td"},Object(i.b)("li",{parentName:"ul"},"gRPC - A capitalized method name defined in\n",Object(i.b)("inlineCode",{parentName:"li"},"io.grpc.MethodDescriptor")," (e.g, ",Object(i.b)("inlineCode",{parentName:"li"},"GetItems"),")"),Object(i.b)("li",{parentName:"ul"},"Thrift and annotated service - a method name (e.g, ",Object(i.b)("inlineCode",{parentName:"li"},"getItems"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"type://HttpService:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/HttpService.html"}),"type://HttpService")," - an HTTP method name")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"serviceName"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the human-readable name of the service that served the request,\nsuch as:"),Object(i.b)("ul",{parentName:"td"},Object(i.b)("li",{parentName:"ul"},"gRPC - a service name (e.g, ",Object(i.b)("inlineCode",{parentName:"li"},"com.foo.GrpcService"),")"),Object(i.b)("li",{parentName:"ul"},"Thrift - a service type (e.g, ",Object(i.b)("inlineCode",{parentName:"li"},"com.foo.ThriftService$AsyncIface")," or\n",Object(i.b)("inlineCode",{parentName:"li"},"com.foo.ThriftService$Iface})")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"type://HttpService:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/HttpService.html"}),"type://HttpService")," and annotated service - an innermost class\nname")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"host"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the name of the virtual host that serves the request"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestHeaders"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the HTTP headers of the request.\nthe header contains the method (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"GET"),", ",Object(i.b)("inlineCode",{parentName:"p"},"POST"),"),\nthe path (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"/thrift/foo"),"),\nthe query (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"foo=bar&bar=baz"),"), the content type, etc."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestContent"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the serialization-dependent content object of the request.\n",Object(i.b)("inlineCode",{parentName:"p"},"ThriftCall")," for Thrift. ",Object(i.b)("inlineCode",{parentName:"p"},"null")," otherwise."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestContentPreview"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the preview of the request content"))))),Object(i.b)("h3",{id:"response-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h3"},{href:"#response-properties","aria-label":"response properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Response properties"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("div",{style:{width:"13rem"}},"Property")),Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the response processing started, in microseconds since the\nepoch (01-Jan-1970 00:00:00 UTC)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to process the response completely"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseLength"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the byte length of the response content"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseCause"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the cause of response processing failure (if any)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"totalDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration between the request start and the response end\n(i.e. response time)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseHeaders"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the HTTP headers of the response.\nthe header contains the statusCode (e.g. 404), the content type, etc."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseContent"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the serialization-dependent content object of the response.\n",Object(i.b)("inlineCode",{parentName:"p"},"ThriftReply")," for Thrift. ",Object(i.b)("inlineCode",{parentName:"p"},"null")," otherwise."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseContentPreview"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the preview of the response content"))))),Object(i.b)("h3",{id:"client-connection-timing-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h3"},{href:"#client-connection-timing-properties","aria-label":"client connection timing properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Client connection timing properties"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("div",{style:{width:"20rem"}},"Property")),Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"connectionAcquisitionStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the client started to acquire a connection, in microseconds\nsince the epoch (01-Jan-1970 00:00:00 UTC)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"connectionAcquisitionDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to get a connection (i.e. the total duration)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"dnsResolutionStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the client started to resolve a domain name, in microseconds\nsince the epoch (01-Jan-1970 00:00:00 UTC), ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if DNS lookup\ndid not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"dnsResolutionDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to resolve a domain name, ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if DNS lookup\ndid not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"socketConnectStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the client started to connect to a remote peer, in\nmicroseconds since the epoch (01-Jan-1970 00:00:00 UTC), ",Object(i.b)("inlineCode",{parentName:"p"},"-1"),"\nif socket connection attempt did not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"socketConnectDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to connect to a remote peer, ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if socket\nconnection attempt did not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"pendingAcquisitionStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the client started to wait for the completion of an existing\nconnection attempt, in microseconds since the\nepoch (01-Jan-1970 00:00:00 UTC), ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if waiting did not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"pendingAcquisitionDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to wait for the completion of an existing\nconnection attempt to use one connection in HTTP/2, ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if\nwaiting did not occur"))))),Object(i.b)("p",null,"The total duration is the sum of ",Object(i.b)("inlineCode",{parentName:"p"},"dnsResolutionDurationNanos"),", ",Object(i.b)("inlineCode",{parentName:"p"},"socketConnectDurationNanos")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"pendingAcquisitionDurationNanos"),". They may or may not occur depending on circumstances.\nThese are some of the scenarios how the total duration is composed of:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Resolving a domain name and connecting to the remote peer.")),Object(i.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(i.b)("object",Object.assign({parentName:"span"},{data:"/764f386253af0f60fca9193075dacedc3684677b.svg",role:"img","aria-label":""}))),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Waiting for the connection to be established, since there's an existing connection attempt, to use one\nconnection in HTTP/2. (Note that, if you create a client with an IP address, ",Object(i.b)("inlineCode",{parentName:"li"},"dnsResolution")," did not\noccur. Also note that, there's no ",Object(i.b)("inlineCode",{parentName:"li"},"socketConnect")," because the client just waits for the connection and\nuses it.)")),Object(i.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(i.b)("object",Object.assign({parentName:"span"},{data:"/22d7143a397492a9653dd5dc4cee3c28fa7d23e5.svg",role:"img","aria-label":""}))),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Connecting to the remote peer with the resolved IP address after the existing connection attempt is\nfailed.")),Object(i.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(i.b)("object",Object.assign({parentName:"span"},{data:"/82033e1bd6ea352d4c7efe5810bd9fc1dbee0874.svg",role:"img","aria-label":""}))),Object(i.b)("h2",{id:"availability-of-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h2"},{href:"#availability-of-properties","aria-label":"availability of properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Availability of properties"),Object(i.b)("p",null,"Armeria handles requests and responses in a stream-oriented way, which means that some properties are revealed\nonly after the streams are processed to some point. For example, there's no way to know the ",Object(i.b)("inlineCode",{parentName:"p"},"requestLength"),"\nuntil the request processing ends. Also, some properties related to the (de)serialization of request content,\nsuch as ",Object(i.b)("inlineCode",{parentName:"p"},"serializationFormat")," and ",Object(i.b)("inlineCode",{parentName:"p"},"requestContent"),", will not be available when request processing just\nstarted."),Object(i.b)("p",null,"The collected properties must be accessed via ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLogAccess:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLogAccess.html"}),"type://RequestLogAccess"),", which provides a safe access to the\ncollected properties via the following methods:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isComplete()")," or ",Object(i.b)("inlineCode",{parentName:"li"},"whenComplete()")," to check if or to get notified when all request and response\nproperties are available."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isRequestComplete()")," or ",Object(i.b)("inlineCode",{parentName:"li"},"whenRequestComplete()")," to check if or to get notified when all request\nproperties are available."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isAvailable(RequestLogProperty...)")," or ",Object(i.b)("inlineCode",{parentName:"li"},"whenAvailable(RequestLogProperty...)")," to check if or to get\nnotified when a certain set of properties are available.")),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import com.linecorp.armeria.common.HttpRequest;\nimport com.linecorp.armeria.common.HttpResponse;\nimport com.linecorp.armeria.common.logging.RequestLog;\nimport com.linecorp.armeria.common.logging.RequestLogProperty;\nimport com.linecorp.armeria.server.ServiceRequestContext;\nimport com.linecorp.armeria.server.AbstractHttpService;\n\nHttpService myService = (ctx, req) -> {\n    final RequestLogAccess logAccess = ctx.log();\n\n    logAccess.whenAvailable(RequestLogProperty.REQUEST_HEADERS)\n             .thenAccept(log -> {\n                 assert log.isAvailable(RequestLogProperty.REQUEST_HEADERS);\n                 System.err.println("Started to handle a request: " +\n                                    log.requestHeaders());\n             });\n\n    logAccess.whenComplete()\n             .thenAccept(log -> {\n                 assert log.isComplete();\n                 System.err.println("Handled a request: " + log);\n             });\n    ...\n}\n')),Object(i.b)("h3",{id:"availability-of-client-timing-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h3"},{href:"#availability-of-client-timing-properties","aria-label":"availability of client timing properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Availability of client timing properties"),Object(i.b)("p",null,"On the client side, you can also get the timing information about the related connection attempt. Unlike\nrequest and response properties, you need to use ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ClientConnectionTimings:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/ClientConnectionTimings.html"}),"type://ClientConnectionTimings")," as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import com.linecorp.armeria.client.ClientConnectionTimings;\nimport com.linecorp.armeria.client.WebClient;\n\nWebClient client = WebClient\n    .builder("http://armeria.com")\n    .decorator((delegate, ctx, req) -> {\n        // Can get as soon as a request is started.\n        ctx.log().whenAvailable(RequestLogProperty.REQUEST_START_TIME)\n           .thenAccept(log -> {\n               final ClientConnectionTimings timings = ClientConnectionTimings.get(log);\n               if (timings != null) {\n                   System.err.println("Connection acquisition duration: " +\n                                      timings.connectionAcquisitionDurationNanos());\n               }\n           });\n        return delegate.execute(ctx, req);\n    })\n    .build();\n')),Object(i.b)(b,{mdxType:"Tip"},Object(i.b)("p",null,"The reason why we used the static method is that the ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ClientConnectionTimings:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/ClientConnectionTimings.html"}),"type://ClientConnectionTimings")," is stored using\nthe attribute. See ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"/docs/advanced-custom-attributes"}),"RequestContext custom attributes")," for more information.")),Object(i.b)("h2",{id:"enabling-content-previews",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h2"},{href:"#enabling-content-previews","aria-label":"enabling content previews permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Enabling content previews"),Object(i.b)("p",null,"Armeria provides the ",Object(i.b)("inlineCode",{parentName:"p"},"requestContentPreview")," and ",Object(i.b)("inlineCode",{parentName:"p"},"responseContentPreview")," properties in ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog"),"\nto retrieve the textual representation of the first N bytes of the request and response content.\nHowever, the properties are disabled by default due to performance overhead and thus they return ",Object(i.b)("inlineCode",{parentName:"p"},"null"),"\nby default. You can enable it using ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ContentPreviewingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/logging/ContentPreviewingClient.html"}),"type://ContentPreviewingClient")," and ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ContentPreviewingService:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/logging/ContentPreviewingService.html"}),"type://ContentPreviewingService"),"\ndecorators."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.server.logging.ContentPreviewingService;\nimport com.linecorp.armeria.server.ServerBuilder;\n\nServerBuilder sb = Server.builder();\n...\n// Enable previewing the content with the maximum length of 100 for textual content.\nsb.decorator(ContentPreviewingService.newDecorator(100));\n...\nsb.build();\n")),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.client.logging.ContentPreviewingClient;\nimport com.linecorp.armeria.client.WebClientBuilder;\n\nWebClientBuilder cb = WebClient.builder();\n...\ncb.decorator(ContentPreviewingClient.newDecorator(100));\n")),Object(i.b)("p",null,"Note that the above decorators enable the previews only for textual content\nwhich meets one of the following cases:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"when its type matches ",Object(i.b)("inlineCode",{parentName:"li"},"text/*")," or ",Object(i.b)("inlineCode",{parentName:"li"},"application/x-www-form-urlencoded"),"."),Object(i.b)("li",{parentName:"ul"},"when its charset has been specified. e.g. application/json; charset=utf-8."),Object(i.b)("li",{parentName:"ul"},"when its subtype is ",Object(i.b)("inlineCode",{parentName:"li"},"xml")," or ",Object(i.b)("inlineCode",{parentName:"li"},"json"),". e.g. application/xml, application/json."),Object(i.b)("li",{parentName:"ul"},"when its subtype ends with ",Object(i.b)("inlineCode",{parentName:"li"},"+xml")," or ",Object(i.b)("inlineCode",{parentName:"li"},"+json"),". e.g. application/atom+xml, application/hal+json")),Object(i.b)("p",null,"You can also customize the previews by specifying your own ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ContentPreviewerFactory:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/ContentPreviewerFactory.html"}),"type://ContentPreviewerFactory")," implementation.\nThe following example enables the textual preview of first 100 characters for the content type of ",Object(i.b)("inlineCode",{parentName:"p"},"text/*"),",\nand the hex dump preview of first 100 characters for the content type of ",Object(i.b)("inlineCode",{parentName:"p"},"application/binary"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import io.netty.buffer.ByteBufUtil;\nimport com.linecorp.armeria.common.MediaType;\nimport com.linecorp.armeria.common.logging.ContentPreviewer;\nimport com.linecorp.armeria.common.logging.ContentPreviewerFactoryBuilder;\n\nServerBuilder sb = Server.builder();\n\nContentPreviewerFactoryBuilder builder = ContentPreviewerFactory.builder().maxLength(100);\nbuilder.text(StandardCharsets.UTF_8 /* default charset */, (ctx, headers) -> {\n    final MediaType contentType = headers.contentType();\n    // Produces the textual preview when the content type is ANY_TEXT_TYPE.\n    if (contentType != null && contentType.is(MediaType.ANY_TEXT_TYPE)) {\n        return true;\n    }\n    return false;\n});\n\n// Produces the hex dump when the content type is APPLICATION_BINARY.\nbuilder.binary(MediaType.APPLICATION_BINARY);\n\nsb.decorator(ContentPreviewingService.newDecorator(builder.build()));\n")),Object(i.b)("p",null,"You can write your own producer to change the way to make the preview, e.g."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"ContentPreviewerFactoryBuilder builder = ContentPreviewerFactory.builder();\nbuilder.binary(MediaTypeSet.of(MediaType.APPLICATION_BINARY),\n               (headers, byteBuf) -> {\n                   // You can use the byteBuf to produce your own way.\n               });\n...\nServerBuilder sb = Server.builder();\n...\nsb.decorator(ContentPreviewingService.newDecorator(builder.build()));\n")),Object(i.b)("h2",{id:"nested-log",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h2"},{href:"#nested-log","aria-label":"nested log permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Nested log"),Object(i.b)("p",null,"When you retry a failed attempt, you might want to record the result of each attempt and to group them under\na single ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog"),". A ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," can contain more than one child ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog"),"\nto support this sort of use cases."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.common.logging.RequestLogBuilder;\n\nRequestLogBuilder.addChild(RequestLog);\n")),Object(i.b)("p",null,"If the added ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," is the first child, the request-side log of the ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," will\nbe propagated to the parent log. You can add as many child logs as you want, but the rest of logs would not\nbe affected. If you want to fill the response-side log of the parent log, please invoke:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"RequestLogBuilder.endResponseWithLastChild();\n")),Object(i.b)("p",null,"This will propagate the response-side log of the last added child to the parent log. The following diagram\nillustrates how a ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," with child logs looks like:"),Object(i.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(i.b)("object",Object.assign({parentName:"span"},{data:"/5e4eef4259d60989e3f219d9b6734136a8cebdc7.svg",role:"img","aria-label":""}))),Object(i.b)("p",null,"You can retrieve the child logs using ",Object(i.b)("inlineCode",{parentName:"p"},"RequestLog.children()"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'final RequestContext ctx = ...;\nctx.log().whenComplete().thenAccept(log -> {\n    if (!log.children().isEmpty()) {\n        System.err.println("A request finished after " + log.children().size() + " attempt(s): " + log);\n    } else {\n        System.err.println("A request is done: " + log);\n    }\n});\n')),Object(i.b)("p",null,Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," is a good example that leverages this feature.\nSee ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"/docs/client-retry#retryingclient-with-logging"}),"RetryingClient with logging")," for more information."))}m.isMDXComponent=!0},xCMr:function(e,t,a){"use strict";var n=a("Wbzz"),r=a("q1tI"),i=a.n(r),o=a("/94A"),c=a("+ejy");t.a=function(e){var t=Object(n.useStaticQuery)("1217743243").allMdx.nodes;return i.a.createElement(c.a,Object.assign({},e,{candidateMdxNodes:t,index:o,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}}}]);
//# sourceMappingURL=component---src-pages-docs-advanced-structured-logging-mdx-48cf4d81a195249e34dd.js.map